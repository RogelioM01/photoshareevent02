#!/usr/bin/env node

/**
 * TEST API PRIMARY SYSTEM
 * 
 * Prueba el sistema h√≠brido con API REST como primario y SMTP como secundario
 */

import { config } from 'dotenv';
config();

import { emailService } from './email-service';

async function testApiPrimarySystem() {
  console.log('üéØ PROBANDO SISTEMA H√çBRIDO - API PRIMARIO');
  console.log('===========================================');
  console.log('üìã Configuraci√≥n:');
  console.log('   1. REST API (em_api_) - PRIMARIO');
  console.log('   2. SMTP (em_smtp_) - SECUNDARIO');
  console.log('   3. Resend - TERCIARIO');
  
  const testEmail = '2dcommx01@gmail.com';
  
  try {
    console.log(`\nüìç Enviando email de prueba a: ${testEmail}`);
    console.log('üîÑ Sistema intentar√° API REST primero, luego SMTP si falla');
    
    // Test registration email with hybrid system
    const eventData = {
      guestName: 'Usuario de Prueba',
      eventTitle: 'Sistema H√≠brido - API Primary + SMTP Secondary',
      eventDate: '2025-08-25',
      eventTime: '19:00',
      eventPlace: 'Centro de Convenciones Rocky',
      eventAddress: 'Av. Principal 123, CDMX',
      qrCode: 'HYBRID2025TEST',
      eventUrl: 'https://rocky.mx/evento/hybrid',
      organizerName: 'Rocky Events Platform'
    };

    await emailService.sendEventRegistrationConfirmation(testEmail, eventData);
    
    console.log('‚úÖ Email de confirmaci√≥n procesado exitosamente');
    console.log(`üì¨ Revisa tu bandeja en: ${testEmail}`);
    
    // Test photo notification
    console.log('\nüì∏ Probando notificaci√≥n de fotos...');
    
    const photoData = {
      guestName: 'Usuario de Prueba', 
      eventTitle: 'Sistema H√≠brido - API Primary + SMTP Secondary',
      photoCount: 5,
      eventUrl: 'https://rocky.mx/evento/hybrid/fotos',
      organizerName: 'Rocky Events Platform'
    };
    
    await emailService.sendNewPhotoNotification(testEmail, photoData);
    
    console.log('‚úÖ Notificaci√≥n de fotos procesada exitosamente');
    
    console.log('\nüéØ SISTEMA H√çBRIDO FUNCIONANDO:');
    console.log('‚úÖ API REST como servicio primario');
    console.log('‚úÖ SMTP como fallback secundario');
    console.log('‚úÖ Resend como fallback terciario');
    console.log('‚úÖ Failover autom√°tico entre servicios');
    console.log('‚úÖ Templates HTML renderizando correctamente');
    console.log('‚úÖ Sistema completo listo para producci√≥n');
    
  } catch (error) {
    console.error('‚ùå Error en sistema h√≠brido:', error);
  }
}

testApiPrimarySystem();